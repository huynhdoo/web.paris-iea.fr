---
import { CollectionEntry, getCollection } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import Details from "@layouts/events/Details.astro";
import List from "@components/List.astro";
import getSortedItems from "@utils/getSortedItems";
import getPageNumbers from "@utils/getPageNumbers";
import slugify from "@utils/slugify";
import { SITE } from "@config";

export interface Props {
  post: CollectionEntry<"events">;
}

export async function getStaticPaths() {
  const posts = await getCollection("events", ({ data }) => !data.draft);
  const postResult = posts.map(post => ({
    params: { slug: slugify(post.data) },
    props: { post },
  }));

  const pagePaths = getPageNumbers(posts.length).map(pageNum => ({
    params: { slug: String(pageNum) },
  }));

  return [...postResult, ...pagePaths];
}

const { slug } = Astro.params;
const { post } = Astro.props;

const collection = "events";
const icon = "event-schedule";
const title = "événements";

const items = await getCollection(collection);
const sortedItems = getSortedItems(items);
const totalPages = getPageNumbers(sortedItems.length);

const currentPage =
  slug && !isNaN(Number(slug)) && totalPages.includes(Number(slug))
    ? Number(slug)
    : 0;
const lastPost = currentPage * SITE.postPerPage;
const startPost = lastPost - SITE.postPerPage;

const paginatedItems = sortedItems.slice(startPost, lastPost);
---

<Layout>
  <Header />
  <main class="w-full max-w-6xl px-2 lg:mx-auto">
    {
      post ? (
        <Details post={post} />
      ) : (
        <List
          items={paginatedItems}
          icon={icon}
          title={title}
          collection={collection}
          pageNum={currentPage}
          totalPages={totalPages.length}
        />
      )
    }
  </main>
  <Footer />
</Layout>
