---
import { CollectionEntry, getCollection } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import Details from "@components/Details.astro";
import List from "@components/List.astro";
import getSortedItems from "@utils/getSortedItems";
import getPageNumbers from "@utils/getPageNumbers";
import slugify from "@utils/slugify";
import { SITE } from "@config";

export interface Props {
  item: CollectionEntry<"pages">;
}

export async function getStaticPaths() {
  const items = await getCollection("pages", ({ data }) => !data.draft);
  const itemResult = items.map(item => ({
    params: { slug: slugify(item.data) },
    props: { item },
  }));

  const pagePaths = getPageNumbers(items.length).map(pageNum => ({
    params: { slug: String(pageNum) },
  }));

  return [...itemResult, ...pagePaths];
}

const { slug } = Astro.params;
const { item } = Astro.props;

const collection = "pages";
const icon = "progress-bar";
const title = "Pages";
const type = "page";

const items = await getCollection(collection);
const sortedItems = getSortedItems(items);
const totalPages = getPageNumbers(sortedItems.length);

const currentPage =
  slug && !isNaN(Number(slug)) && totalPages.includes(Number(slug))
    ? Number(slug)
    : 0;
const lastPost = currentPage * SITE.postPerPage;
const startPost = lastPost - SITE.postPerPage;

const paginatedItems = sortedItems.slice(startPost, lastPost);
---

<Layout>
  <Header />
  <main class="w-full max-w-6xl px-2 lg:mx-auto">
    {
      item ? (
        <Details icon={icon} type={type} collection={collection} item={item} />
      ) : (
        <List
          items={paginatedItems}
          icon={icon}
          title={title}
          collection={collection}
          pageNum={currentPage}
          totalPages={totalPages.length}
        />
      )
    }
  </main>
  <Footer />
</Layout>
